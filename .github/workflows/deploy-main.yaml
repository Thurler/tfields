name: Add Tag, Build Linux

on:
  push:
    branches:
      - 'main'

jobs:
  build-linux:
    name: Linux Native Build
    runs-on: ubuntu-20.04
    timeout-minutes: 10
    steps:
      - name: Code Checkout
        uses: actions/checkout@v3

      - name: Install Dependencies
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo apt-get update -y
          sudo apt install -y clang cmake curl libgtk-3-dev ninja-build pkg-config unzip xvfb

      - name: Flutter Environment
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.5'

      - name: Flutter Config
        run: flutter config --enable-linux-desktop --no-analytics

      - name: Flutter Pub Get
        run: flutter pub get

      - name: Flutter Build Linux Native
        run: cd example && flutter build linux --release

  make-tag:
    name: Add Tag and Release
    depends-on: build-linux
    runs-on: ubuntu-latest
    steps:
      - name: Code Checkout
        uses: actions/checkout@v3

      - name: Determine Tag
        run: |
          echo "RELEASE_TAG=$(cat pubspec.yaml | grep version | awk -F ' ' '{print $2}')" >> $GITHUB_ENV

      - name: Determine Tag Message
        run: |
          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
          echo "TAG_MESSAGE<<$EOF" >> $GITHUB_ENV               
          cat latest-notes.txt >> $GITHUB_ENV
          echo "$EOF" >> $GITHUB_ENV

      - name: Create Release
        uses: actions/github-script@v6
        with:
          github-token: "${{ secrets.RELEASE_TOKEN }}"
          script: |
            try {
              const response = await github.rest.repos.createRelease({
                tag_name: process.env.RELEASE_TAG,
                name: process.env.RELEASE_TAG,
                body: process.env.TAG_MESSAGE,
                draft: false,
                prerelease: false,
                generate_release_notes: true,
                owner: context.repo.owner,
                repo: context.repo.repo,
              });
            } catch (error) {
              core.setFailed(error.message);
            }
